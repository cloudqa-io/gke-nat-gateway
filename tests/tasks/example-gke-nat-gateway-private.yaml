# Copyright 2017 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

platform: linux
inputs:
- name: terraform-google-nat-gateway
- name: terraform
outputs:
- name: email
image_resource:
  type: docker-image
  source:
    repository: google/cloud-sdk
    tag: latest
params:
  service_account_json:
  project_id:
  region:
  zone:
run:
  path: bash
  args:
  - -exc
  - |
    set -o pipefail
    SA_JSON=${PWD}/service_account.json
    cat > ${SA_JSON} <<EOF
    $service_account_json
    EOF
    apt-get install -y git openssl jq unzip curl
    gcloud auth activate-service-account --key-file=${SA_JSON}
    gcloud config set project $project_id
    gcloud config set compute/zone $zone

    cd terraform-google-nat-gateway

    # Setup email
    EMAIL=${PWD}/../email
    echo "terraform-google-nat-gateway/example-gke-nat-gateway-private: Failed to run example" > ${EMAIL}/subject-failed
    git --no-pager show > ${EMAIL}/body-failed

    # Install latest terraform
    curl -sL https://goo.gl/yZS5XU | bash
    source ${HOME}/.bashrc
    terraform version

    # Env for terraform google provider
    export GOOGLE_APPLICATION_CREDENTIALS=${SA_JSON}
    export GOOGLE_PROJECT=$project_id

    ### Begin Terraform example test
    BASE_DIR=${PWD}/examples/gke-nat-gateway

    function cleanup {
      cd ${BASE_DIR}/ && terraform destroy -input=false -auto-approve
    }
    trap cleanup EXIT

    # Extract params from terraform metadata
    TF_METADATA=$(cat ../terraform/metadata)
    
    NETWORK=$(jq -e -r '.subnetwork_name' <<<${TF_METADATA})
    REGION=$(jq -e -r '.cluster_region' <<<${TF_METADATA})
    ZONE=$(jq -e -r '.cluster_zone' <<<${TF_METADATA})
    CLUSTER_NAME=$(jq -e -r '.cluster_name' <<<${TF_METADATA})

    # Change to example directory
    cd examples/gke-nat-gateway

    # Generate terraform.tfvars
    NODE_TAG=$(gcloud compute instance-templates describe $(gcloud compute instance-templates list --filter=name~gke-${CLUSTER_NAME} --limit=1 --uri) --format='get(properties.tags.items[0])')
    test -n "${NODE_TAG}"
    
    cat > terraform.tfvars <<EOF
    network       = "${NETWORK}"
    region        = "${REGION}"
    zone          = "${ZONE}"
    gke_master_ip = ""
    gke_node_tag  = "${NODE_TAG}"
    EOF
    
    # Run Terraform
    terraform init -upgrade=true
    terraform plan
    terraform apply -input=false -auto-approve | tee ${EMAIL}/body-failed

    # Test NAT Gateway
    gcloud container clusters get-credentials ${CLUSTER_NAME} --zone ${ZONE}
    NAT_IP=$(terraform output ip-nat-gateway)
    count=0
    EXTERNAL_IP=""
    while [[ $count -lt 3 && "${NAT_IP}" != "$(tr -d '\r' <<<${EXTERNAL_IP})" ]]; do
      EXTERNAL_IP=$(kubectl run example -i -t --rm --restart=Never --image centos:7 -- curl -s http://ipinfo.io/ip || true)
      ((count=count+1))
    done
    test $count -lt 3
